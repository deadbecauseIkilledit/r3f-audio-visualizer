/**
 * A type representing a fetcher function that can be
 * passed to createZodFetcher.
 */
type AnyFetcher = (...args: any[]) => any;
/**
 * @internal
 */
type Schema<TData> = {
    parse: (data: unknown) => TData;
};
/**
 * A type utility which represents the function returned
 * from createZodFetcher
 */
type ZodFetcher<TFetcher extends AnyFetcher> = <TData>(schema: Schema<TData>, ...args: Parameters<TFetcher>) => Promise<TData>;
/**
 * The default fetcher used by createZodFetcher when no
 * fetcher is provided.
 */
declare const defaultFetcher: (input: RequestInfo | URL, init?: RequestInit | undefined) => Promise<any>;
/**
 * Creates a `fetchWithZod` function that takes in a schema of
 * the expected response, and the arguments to fetch.
 *
 * Since you didn't provide a fetcher in `createZodFetcher()`,
 * we're falling back to the default fetcher.
 *
 * @example
 *
 * const fetchWithZod = createZodFetcher();
 *
 * const response = await fetchWithZod(
 *   z.object({
 *     hello: z.string(),
 *   }),
 *   "https://example.com",
 * );
 */
declare function createZodFetcher(): ZodFetcher<typeof fetch>;
/**
 * Creates a `fetchWithZod` function that takes in a schema of
 * the expected response, and the arguments to the fetcher
 * you provided.
 *
 * @example
 *
 * const fetchWithZod = createZodFetcher((url) => {
 *   return fetch(url).then((res) => res.json());
 * });
 *
 * const response = await fetchWithZod(
 *   z.object({
 *     hello: z.string(),
 *   }),
 *   "https://example.com",
 * );
 */
declare function createZodFetcher<TFetcher extends AnyFetcher>(
/**
 * A fetcher function that returns the data you'd like to parse
 * with the schema.
 */
fetcher: TFetcher): ZodFetcher<TFetcher>;

export { AnyFetcher, Schema, ZodFetcher, createZodFetcher, defaultFetcher };
